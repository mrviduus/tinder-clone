-- Enable PostGIS extension
CREATE EXTENSION IF NOT EXISTS postgis;

-- Identity tables with custom names
CREATE TABLE "roles" (
    "Id" uuid NOT NULL,
    "Name" character varying(256),
    "NormalizedName" character varying(256),
    "ConcurrencyStamp" text,
    CONSTRAINT "PK_roles" PRIMARY KEY ("Id")
);

CREATE TABLE "users" (
    "Id" uuid NOT NULL,
    "UserName" character varying(256),
    "NormalizedUserName" character varying(256),
    "Email" character varying(256),
    "NormalizedEmail" character varying(256),
    "EmailConfirmed" boolean NOT NULL,
    "PasswordHash" text,
    "SecurityStamp" text,
    "ConcurrencyStamp" text,
    "PhoneNumber" text,
    "PhoneNumberConfirmed" boolean NOT NULL,
    "TwoFactorEnabled" boolean NOT NULL,
    "LockoutEnd" timestamp with time zone,
    "LockoutEnabled" boolean NOT NULL,
    "AccessFailedCount" integer NOT NULL,
    CONSTRAINT "PK_users" PRIMARY KEY ("Id")
);

CREATE TABLE "role_claims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "RoleId" uuid NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_role_claims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_role_claims_roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "roles" ("Id") ON DELETE CASCADE
);

CREATE TABLE "user_claims" (
    "Id" integer GENERATED BY DEFAULT AS IDENTITY,
    "UserId" uuid NOT NULL,
    "ClaimType" text,
    "ClaimValue" text,
    CONSTRAINT "PK_user_claims" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_user_claims_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "user_logins" (
    "LoginProvider" text NOT NULL,
    "ProviderKey" text NOT NULL,
    "ProviderDisplayName" text,
    "UserId" uuid NOT NULL,
    CONSTRAINT "PK_user_logins" PRIMARY KEY ("LoginProvider", "ProviderKey"),
    CONSTRAINT "FK_user_logins_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "user_roles" (
    "UserId" uuid NOT NULL,
    "RoleId" uuid NOT NULL,
    CONSTRAINT "PK_user_roles" PRIMARY KEY ("UserId", "RoleId"),
    CONSTRAINT "FK_user_roles_roles_RoleId" FOREIGN KEY ("RoleId") REFERENCES "roles" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_user_roles_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "user_tokens" (
    "UserId" uuid NOT NULL,
    "LoginProvider" text NOT NULL,
    "Name" text NOT NULL,
    "Value" text,
    CONSTRAINT "PK_user_tokens" PRIMARY KEY ("UserId", "LoginProvider", "Name"),
    CONSTRAINT "FK_user_tokens_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

-- Custom application tables
CREATE TABLE "profiles" (
    "UserId" uuid NOT NULL,
    "DisplayName" character varying(100) NOT NULL,
    "Bio" character varying(500),
    "BirthDate" timestamp with time zone NOT NULL,
    "Gender" integer NOT NULL,
    "Location" geography(Point,4326),
    "CreatedAt" timestamp with time zone NOT NULL,
    "UpdatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_profiles" PRIMARY KEY ("UserId"),
    CONSTRAINT "FK_profiles_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "photos" (
    "Id" uuid NOT NULL,
    "UserId" uuid NOT NULL,
    "ContentType" character varying(50) NOT NULL,
    "Data" bytea NOT NULL,
    "SizeBytes" bigint NOT NULL,
    "UploadedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_photos" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_photos_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE,
    CONSTRAINT "CK_Photo_SizeBytes" CHECK ("SizeBytes" <= 5242880)
);

CREATE TABLE "swipes" (
    "Id" uuid NOT NULL,
    "SwiperId" uuid NOT NULL,
    "TargetId" uuid NOT NULL,
    "IsLike" boolean NOT NULL,
    "SwipedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_swipes" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_swipes_users_SwiperId" FOREIGN KEY ("SwiperId") REFERENCES "users" ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_swipes_users_TargetId" FOREIGN KEY ("TargetId") REFERENCES "users" ("Id") ON DELETE RESTRICT
);

CREATE TABLE "matches" (
    "Id" uuid NOT NULL,
    "UserAId" uuid NOT NULL,
    "UserBId" uuid NOT NULL,
    "MatchedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_matches" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_matches_users_UserAId" FOREIGN KEY ("UserAId") REFERENCES "users" ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_matches_users_UserBId" FOREIGN KEY ("UserBId") REFERENCES "users" ("Id") ON DELETE RESTRICT
);

CREATE TABLE "blocks" (
    "Id" uuid NOT NULL,
    "BlockerId" uuid NOT NULL,
    "TargetId" uuid NOT NULL,
    "BlockedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_blocks" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_blocks_users_BlockerId" FOREIGN KEY ("BlockerId") REFERENCES "users" ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_blocks_users_TargetId" FOREIGN KEY ("TargetId") REFERENCES "users" ("Id") ON DELETE RESTRICT
);

CREATE TABLE "refresh_tokens" (
    "Id" uuid NOT NULL,
    "UserId" uuid NOT NULL,
    "Token" text NOT NULL,
    "ExpiresAt" timestamp with time zone NOT NULL,
    "CreatedAt" timestamp with time zone NOT NULL,
    CONSTRAINT "PK_refresh_tokens" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_refresh_tokens_users_UserId" FOREIGN KEY ("UserId") REFERENCES "users" ("Id") ON DELETE CASCADE
);

CREATE TABLE "messages" (
    "Id" uuid NOT NULL,
    "MatchId" uuid NOT NULL,
    "SenderId" uuid NOT NULL,
    "Content" text NOT NULL,
    "SentAt" timestamp with time zone NOT NULL,
    "ImagePhotoId" uuid,
    CONSTRAINT "PK_messages" PRIMARY KEY ("Id"),
    CONSTRAINT "FK_messages_matches_MatchId" FOREIGN KEY ("MatchId") REFERENCES "matches" ("Id") ON DELETE CASCADE,
    CONSTRAINT "FK_messages_users_SenderId" FOREIGN KEY ("SenderId") REFERENCES "users" ("Id") ON DELETE RESTRICT,
    CONSTRAINT "FK_messages_photos_ImagePhotoId" FOREIGN KEY ("ImagePhotoId") REFERENCES "photos" ("Id") ON DELETE SET NULL
);

-- Create indexes
CREATE INDEX "IX_role_claims_RoleId" ON "role_claims" ("RoleId");
CREATE INDEX "IX_roles_NormalizedName" ON "roles" ("NormalizedName");
CREATE INDEX "IX_user_claims_UserId" ON "user_claims" ("UserId");
CREATE INDEX "IX_user_logins_UserId" ON "user_logins" ("UserId");
CREATE INDEX "IX_user_roles_RoleId" ON "user_roles" ("RoleId");
CREATE INDEX "IX_users_NormalizedEmail" ON "users" ("NormalizedEmail");
CREATE INDEX "IX_users_NormalizedUserName" ON "users" ("NormalizedUserName");

CREATE INDEX "IX_profiles_Location" ON "profiles" USING GIST ("Location");
CREATE INDEX "IX_photos_UserId" ON "photos" ("UserId");
CREATE INDEX "IX_swipes_SwiperId_TargetId" ON "swipes" ("SwiperId", "TargetId");
CREATE INDEX "IX_swipes_SwiperId" ON "swipes" ("SwiperId");
CREATE INDEX "IX_swipes_TargetId" ON "swipes" ("TargetId");
CREATE INDEX "IX_matches_UserAId_UserBId" ON "matches" ("UserAId", "UserBId");
CREATE INDEX "IX_blocks_BlockerId_TargetId" ON "blocks" ("BlockerId", "TargetId");
CREATE INDEX "IX_refresh_tokens_Token" ON "refresh_tokens" ("Token");
CREATE INDEX "IX_messages_MatchId_SentAt" ON "messages" ("MatchId", "SentAt");
CREATE INDEX "IX_messages_SenderId" ON "messages" ("SenderId");
CREATE INDEX "IX_messages_ImagePhotoId" ON "messages" ("ImagePhotoId");

-- Add unique constraints
ALTER TABLE "swipes" ADD CONSTRAINT "AK_swipes_SwiperId_TargetId" UNIQUE ("SwiperId", "TargetId");
ALTER TABLE "matches" ADD CONSTRAINT "AK_matches_UserAId_UserBId" UNIQUE ("UserAId", "UserBId");
ALTER TABLE "blocks" ADD CONSTRAINT "AK_blocks_BlockerId_TargetId" UNIQUE ("BlockerId", "TargetId");
ALTER TABLE "refresh_tokens" ADD CONSTRAINT "AK_refresh_tokens_Token" UNIQUE ("Token");
